generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Galaxy {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  image       String      @db.VarChar(255)
  userViews   Int         @default(0)
  blackHole   BlackHole[]
  planet      Planet[]
}

model BlackHole {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(255)
  description String        @db.VarChar(255)
  type        BlackHoleType
  image       String        @db.VarChar(255)
  userViews   Int           @default(0)
  galaxyId    String        @db.VarChar(36)
  galaxy      Galaxy        @relation(fields: [galaxyId], references: [id])
}

model Planet {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255)
  description String     @db.VarChar(255)
  image       String     @db.VarChar(255)
  userViews   Int        @default(0)
  galaxyId    String     @db.VarChar(36)
  galaxy      Galaxy     @relation(fields: [galaxyId], references: [id])
  moon        Moon?
  satelite    Satelite[]
}

model Moon {
  id          String @id @default(uuid())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  image       String @db.VarChar(255)
  userViews   Int    @default(0)
  planetId    String @unique @db.VarChar(36)
  planet      Planet @relation(fields: [planetId], references: [id])
}

model Satelite {
  id          String @id @default(uuid())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  image       String @db.VarChar(255)
  userViews   Int    @default(0)
  planetId    String @db.VarChar(36)
  planet      Planet @relation(fields: [planetId], references: [id])
}

model role {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  displayName String @db.VarChar(255)
  user        user[]
}

model user {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(255)
  password String @db.VarChar(255)
  email    String @db.VarChar(255)
  roleId   Int
  role     role   @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c28e52f758e7bbc53828db92194")

  @@index([roleId], map: "FK_c28e52f758e7bbc53828db92194")
}

model quizz_categories {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  quizz quizz[]
}

model quizz {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(255)
  description String            @db.Text
  categoryId  Int
  category    quizz_categories? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c28e52f758e7bbc53828db92195")
  questions   quizz_questions[]
}

model quizz_questions {
  id       Int               @id @default(autoincrement())
  type     QuizzQuestionType @default(text)
  question String            @db.VarChar(255)
  anwsers  Json
  quizzId  Int
  quizz    quizz?            @relation(fields: [quizzId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c28e52f758e7bbc53828db92196")
}

enum QuizzQuestionType {
  text
  text_multiple
  image_multiple
}

enum BlackHoleType {
  stellar
  supermassive
  intermediate
  primordial
}
